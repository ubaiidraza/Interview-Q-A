   1. JavaScript Basics
Question: JavaScript kya hai aur ye kis type ki language hai?
Answer:
JavaScript ek high-level, interpreted, aur dynamic programming language hai. Ye primarily client-side web development ke liye use hoti hai, lekin Node.js ke zariye server-side bhi kaam kar sakti hai. Ye single-threaded aur prototype-based object-oriented language hai.

2. Variables aur Data Types
Question: JavaScript mein var, let, aur const ka kya farq hai?
Answer:

var: Function-scoped hoti hai aur hoisting ke sath kaam karti hai.
let: Block-scoped hoti hai aur re-assign ki ja sakti hai.
const: Block-scoped hoti hai lekin ismein ek baar assign ki gayi value change nahi ho sakti.
3. Functions
Question: Arrow function aur traditional function mein kya farq hai?
Answer:

Arrow Function: Short syntax ke liye use hoti hai aur iska this parent scope se bind hota hai.
Traditional Function: Iska apna this context hota hai.
javascript
Copy
Edit
const arrowFunc = () => console.log(this); // Parent scope
function traditionalFunc() {
  console.log(this); // Apna scope
}
4. DOM Manipulation
Question: DOM manipulation ke liye kaunse methods use hote hain?
Answer:

document.getElementById(): ID ke basis par element fetch karna.
document.querySelector(): CSS selector ke zariye element lena.
innerHTML aur textContent: Element ke andar ka content change karna.
addEventListener(): Events ko handle karna.
5. Asynchronous JavaScript
Question: Callback, Promise, aur Async/Await mein kya farq hai?
Answer:

Callback: Ek function jo doosre function ke andar argument ke taur par pass hota hai.
Promise: Ek object jo future mein value return karega (resolve/reject).
Async/Await: Promises ko handle karne ka easier syntax.
javascript
Copy
Edit
// Promise
fetch("url").then(response => response.json()).then(data => console.log(data));

// Async/Await
async function fetchData() {
  const response = await fetch("url");
  const data = await response.json();
  console.log(data);
}
6. Arrays aur Objects
Question: Array ke commonly used methods kaunse hain?
Answer:

push(), pop(), shift(), unshift()
map(), filter(), reduce()
find(), findIndex(), forEach()
7. Event Loop
Question: Event Loop kya hai?
Answer:
JavaScript ka event loop ek mechanism hai jo asynchronous operations ko handle karta hai. Ye call stack aur task queue ke beech coordination karta hai.

8. Error Handling
Question: Error handling ke liye JavaScript mein kya use karte hain?
Answer:
Error handling ke liye try...catch aur throw statements ka use hota hai.

javascript
Copy
Edit
try {
  const num = 10 / 0;
  if (!isFinite(num)) throw new Error("Divide by zero!");
} catch (err) {
  console.error(err.message);
}
9. ES6+ Features
Question: ES6 mein introduce ki gayi kuch important features ka zikr karein.
Answer:

let aur const
Template literals
Arrow functions
Classes
Destructuring assignment
Modules (import/export)
10. Advanced Topics
Question: JavaScript mein hoisting kya hoti hai?
Answer:
Hoisting ek mechanism hai jisme variables aur function declarations ko execution ke pehle memory mein upar le jaata hai. Lekin let aur const variables temporal dead zone mein hote hain.

  1. What is JavaScript?
Answer:
JavaScript is a lightweight, interpreted, or just-in-time compiled programming language used to create interactive effects on web pages. It is primarily used for client-side development but can also be used on the server side with environments like Node.js.
 
2. What are variables in JavaScript? How do you declare them?
Answer:
Variables are containers for storing data values.
You can declare variables using:

var (function-scoped, old way)
let (block-scoped, modern)
const (block-scoped, constant)
javascript
Copy
Edit
let x = 10; 
const y = 20; 
var z = 30;
3. What are data types in JavaScript?
Answer:
JavaScript has the following data types:

Primitive: String, Number, Boolean, Undefined, Null, Symbol, BigInt
Non-Primitive: Object (Arrays, Functions, etc.)
4. What is the difference between == and ===?
Answer:

== compares values only (type coercion occurs).
=== compares both values and types (strict equality).
javascript
Copy
Edit
5 == "5";   // true
5 === "5";  // false
5. What are JavaScript functions? How do you define them?
Answer:
Functions are blocks of reusable code that perform a specific task.
You can define functions as:

javascript
Copy
Edit
// Function Declaration
function greet() {
  console.log("Hello!");
}

// Function Expression
const greet = function () {
  console.log("Hello!");
};

// Arrow Function
const greet = () => {
  console.log("Hello!");
};
6. What is an array? How do you create one?
Answer:
An array is a collection of elements stored in a single variable.

javascript
Copy
Edit
const fruits = ["Apple", "Banana", "Mango"];
console.log(fruits[0]); // Accesses "Apple"
7. What is the difference between null and undefined?
Answer:

undefined: A variable is declared but not assigned a value.
null: Intentionally assigned to a variable to represent "no value."
8. What are JavaScript objects?
Answer:
Objects are collections of key-value pairs.

javascript
Copy
Edit
const person = {
  name: "John",
  age: 25,
};
console.log(person.name); // "John"
9. What is the DOM?
Answer:
The Document Object Model (DOM) is a programming interface that represents the structure of an HTML document. It allows JavaScript to manipulate elements dynamically.

10. What are events in JavaScript?
Answer:
Events are actions or occurrences (like clicks, hovers) that JavaScript can respond to.

javascript
Copy
Edit
document.getElementById("btn").addEventListener("click", function () {
  alert("Button clicked!");
});
11. What is the difference between var, let, and const?
Answer:

var: Function-scoped, hoisted, allows redeclaration.
let: Block-scoped, not hoisted, no redeclaration.
const: Block-scoped, must be initialized, no reassignment.
12. What is hoisting in JavaScript?
Answer:
Hoisting is a mechanism where variable and function declarations are moved to the top of their scope before execution.

javascript
Copy
Edit
console.log(x); // undefined
var x = 5;
13. Explain closures in JavaScript.
Answer:
A closure is a function that retains access to its outer scope even after the outer function has executed.

javascript
Copy
Edit
function outer() {
  let count = 0;
  return function () {
    count++;
    console.log(count);
  };
}

const counter = outer();
counter(); // 1
counter(); // 2
14. What is the this keyword in JavaScript?
Answer:
this refers to the object that is currently executing the code. Its value depends on how the function is called.

15. What is the difference between map() and forEach()?
Answer:

map(): Creates a new array by applying a function to each element.
forEach(): Iterates over an array but doesn’t return a new array.
javascript
Copy
Edit
const nums = [1, 2, 3];
const doubled = nums.map(num => num * 2); // [2, 4, 6]
nums.forEach(num => console.log(num)); // Logs: 1, 2, 3
  16. What is the difference between call(), apply(), and bind()?
Answer:

call(): Invokes a function with arguments passed individually.
apply(): Invokes a function with arguments passed as an array.
bind(): Returns a new function with this bound to a specified object.
17. What is asynchronous programming in JavaScript?
Answer:
Asynchronous programming allows non-blocking code execution. Examples include callbacks, promises, and async/await.

18. What are promises in JavaScript?
Answer:
Promises represent the eventual completion (or failure) of an asynchronous operation.

javascript
Copy
Edit
const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Success"), 1000);
});

promise.then((res) => console.log(res)); // Logs: "Success"
19. What is the purpose of async/await?
Answer:
async/await makes asynchronous code look synchronous and easier to read.

javascript
Copy
Edit
async function fetchData() {
  const data = await fetch("https://api.example.com");
  console.log(await data.json());
}
20. How do you handle errors in JavaScript?
Answer:
You can handle errors using try...catch.

javascript
Copy
Edit
try {
  let x = y; // y is not defined
} catch (error) {
  console.log("Error:", error.message);
}     
1. JavaScript Core Concepts
var, let, aur const ka kya farq hai? Aur inka scoping kaise kaam karta hai?
JavaScript main hoisting kya hoti hai?
Closure kya hai aur isse kaise use karte hain?
Event loop kya hai aur JavaScript asynchronous kaam kaise handle karta hai?
Promises aur async/await ka farq kya hai?
call, apply, aur bind functions kaise kaam karte hain? Examples do.
JavaScript main prototype inheritance kya hoti hai?
Generator functions kya hoti hain aur ye normal functions se kaise different hain?
WeakMap aur WeakSet kya hain aur inka Map aur Set se comparison karo.
'use strict' mode ka kya role hai aur ye behavior kaise change karta hai?
2. Advanced Data Structures and Types
Shallow copy aur deep copy ka kya farq hai? Implement kaise karte hain?
JavaScript main null aur undefined ka difference kya hai?
Type coercion kya hota hai aur == aur === kaise kaam karte hain?
Symbol type kya hai aur iska use case kya hai?
Floating-point arithmetic errors ko kaise solve karte hain? (e.g., 0.1 + 0.2 !== 0.3) 
3. Asynchronous Programming
Microtasks aur macrotasks ka kya farq hai? Examples ke saath samjhao.
Debouncing aur throttling mein kya difference hai?
Web workers kya hain aur ye performance kaise improve karte hain?
Agar ek promise main dono resolve aur reject call ho jayein to kya hoga?
Promise.all, Promise.race, aur Promise.allSettled kaise kaam karte hain?
4. Object-Oriented Programming
ES6 classes ka use kar ke inheritance kaise implement karte hain?
JavaScript main getters aur setters ka kya role hai?
super keyword kaise kaam karta hai?
Singleton pattern kaise implement karte hain?
Modern JavaScript main private methods aur properties kaise define karte hain?
5. Performance Optimization
Memory leaks kya hain aur inhe avoid kaise karte hain?
requestAnimationFrame ka kya fayda hai animations ke liye?
JavaScript code ko optimize karne ke kuch techniques batao.
Lazy-loading kaise implement karte hain?
Tree shaking kya hota hai aur isse bundling kaise efficient banti hai?
6. DOM Manipulation and Events
Event delegation kya hota hai aur direct event handling se better kyu hai?
Event listeners main this ka behavior kaise hota hai?
Capturing aur bubbling phases ka difference kya hai?
Custom events kaise banate hain?
DOMContentLoaded aur load events ka farq kya hai?
7. Miscellaneous Topics
JavaScript module system kaise kaam karta hai? CommonJS aur ES6 modules ka comparison karo.
CORS kya hai aur iska JavaScript applications par kya impact hota hai?
Proxy objects kya hote hain aur inka use case kya hai?
Circular references kaise detect aur handle karte hain?
with statement kya hai aur ye discouraged kyu hota hai?
8. Problem-Solving Challenges
Ek debounce function implement karo.
Promise.all ka polyfill likho.
Ek memoization function banao jo expensive computations optimize kare.
Nested array ko flatten karne ka function likho.
Custom deep comparison function banao jo do objects ko compare kare.


  1. Basics of JavaScript
JavaScript aur ECMAScript mein kya farq hai?

JavaScript ek programming language hai jo web browsers mein chalti hai.
ECMAScript ek standard hai jiske rules aur specifications JavaScript follow karta hai.
JavaScript = Implementation, ECMAScript = Standard.
JavaScript single-threaded language hai ya multi-threaded? Explain karo.

JavaScript single-threaded hai, iska matlab ek waqt mein ek hi kaam (execution) kar sakti hai.
Asynchronous tasks ko handle karne ke liye Event Loop aur Callback Queue ka use karti hai.
undefined aur null mein kya farq hai?

undefined: Jab variable declare ho jaye lekin uski koi value assign na ho.
null: Ek intentional empty value hai jo developer manually assign karta hai.
2. Variables aur Scopes
JavaScript mein var, let, aur const ka farq samjhao.

var: Function-scoped, hoisting hoti hai.
let: Block-scoped, reassign ho sakta hai.
const: Block-scoped, immutable value.
Block scope aur function scope mein kya difference hai?

Block scope: {} ke andar declare variables block ke bahar accessible nahi hote (let, const).
Function scope: Variables sirf function ke andar accessible hote hain (var).
Temporal Dead Zone kya hoti hai?

Ek phase jisme variables let aur const ke liye declare hone ke baad hi use ho sakte hain, lekin hoisting ke baad se unka memory allocation hota hai.
   3. Data Types aur Type Conversion
JavaScript mein primitive aur non-primitive types kaunse hain?

Primitive types: string, number, boolean, undefined, null, bigint, symbol.
Non-primitive types: Object, Array, Function.
Implicit type coercion kya hoti hai?
JavaScript automatically type conversion karta hai.

javascript
Copy
Edit
console.log('5' + 5); // "55" (string concatenation)
console.log('5' - 5); // 0 (number subtraction)
== aur === mein kya difference hai?

==: Type coercion karta hai. (5 == '5' -> true)
===: Strict equality check karta hai, type coercion nahi karta. (5 === '5' -> false)
4. Functions
Higher-order function kya hota hai?
Ek function jo doosre function ko argument ke taur par le ya return kare.

Callback function kya hota hai aur iska use batayein?
Ek function jo kisi doosre function ke andar argument ke taur par pass kiya jata hai.

Closure kya hota hai? Example ke sath explain karein.
Closure tab banta hai jab ek inner function apne outer function ke variables ko access karta hai, even after outer function execute ho chuka ho.

javascript
Copy
Edit
function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}
const increment = outer();
console.log(increment()); // 1
console.log(increment()); // 2
5. DOM Manipulation
DOM kya hota hai aur kaise kaam karta hai?
Document Object Model (DOM) ek browser ke andar HTML aur XML documents ko structure aur interact karne ka tarika hai.

document.querySelector() aur document.getElementById() mein kya farq hai?

getElementById(): Sirf ID ke zariye element ko fetch karta hai.
querySelector(): CSS selector ke zariye element ko fetch karta hai.
Event delegation kya hoti hai aur iska use kya hai?
Ek parent element ke upar event listener lagana, aur uske child elements ke events ko handle karna.

   6. Asynchronous JavaScript
JavaScript synchronous hai ya asynchronous? Explain karo.
JavaScript synchronous hai, lekin asynchronous tasks ke liye Promises, async/await, aur event loop ka use karta hai.

Promises ke lifecycle ke different states ka zikr karo.

Pending: Initial state.
Fulfilled: Task complete ho gaya.
Rejected: Task fail ho gaya.
Async/Await kaise kaam karta hai?
Promises ko handle karne ke liye simplified syntax hai.

7. Arrays aur Objects
Shallow copy aur deep copy kaise karte hain?

Shallow copy: Object.assign() ya spread operator.
Deep copy: JSON.parse(JSON.stringify()).
map() vs forEach()

map(): Naya array return karta hai.
forEach(): Sirf iteration ke liye hai, kuch return nahi karta.
8. Hoisting
Hoisting ka matlab kya hai?
Variables aur functions ko unke declaration se pehle memory mein allocate karna.

Function declarations aur function expressions mein hoisting ke waqt kya farq hota hai?

Declaration: Hoisting hoti hai.
Expression: Hoisting nahi hoti.
9. Event Loop aur Execution Context
Event loop kaise kaam karta hai?
Event loop synchronous aur asynchronous code ko efficiently manage karta hai.

10. ES6+ Features
Template literals kya hote hain?
String interpolation ke liye use hote hain:

javascript
Copy
Edit
let name = 'Ubaid';
console.log(`Hello, ${name}!`);
Spread operator aur rest operator mein kya farq hai?

Spread: Expand karta hai.
Rest: Collect karta hai.
11. Error Handling
try...catch kaise use hota hai?
Errors ko handle karne ke liye.

12. Closures
Real-world example: Private variables banana.

13. Prototypes aur Inheritance
Prototype-based inheritance: Objects ke beech sharing.   
Answers
1️⃣ JavaScript Basics
Q1: JavaScript aur ECMAScript mein kya farq hai?
➡ JavaScript ek programming language hai jo web development ke liye use hoti hai.
➡ ECMAScript JavaScript ka standard hai jo define karta hai ke JS ka syntax aur behavior kya hoga.

Q2: JavaScript single-threaded hai ya multi-threaded?
➡ JavaScript ek single-threaded language hai, iska matlab ek waqt mein sirf ek kaam execute karti hai.
➡ Asynchronous operations ko handle karne ke liye Event Loop ka use hota hai.

Q3: Hoisting kya hoti hai?
➡ JavaScript mein hoisting ka matlab hai ke variables aur functions execution se pehle memory mein upar shift ho jate hain.
➡ Example:

js
Copy
Edit
console.log(x); // undefined (hoisted but not assigned)
var x = 5;

greet(); // "Hello" (function hoisting)
function greet() {
  console.log("Hello");
}
➡ let aur const bhi hoist hote hain, lekin Temporal Dead Zone (TDZ) ke wajah se unko pehle access nahi kar sakte.

2️⃣ Variables & Scope
Q4: var, let aur const ka farq kya hai?

Feature	var	let	const
Scope	Function-scoped	Block-scoped	Block-scoped
Reassignment	Allowed	Allowed	Not allowed
Hoisting	Hoisted (undefined)	Hoisted (TDZ)	Hoisted (TDZ)
Q5: Closure kya hota hai?
➡ Closure ek function hota hai jo apne parent scope ki variables ko yaad rakhta hai, chahe parent function execute ho chuka ho.
➡ Example:

js
Copy
Edit
function outer() {
  let count = 0;
  return function inner() {
    count++;
    console.log(count);
  };
}

const counter = outer();
counter(); // 1
counter(); // 2
➡ Yeh interview mein bahut zyada poocha jata hai!

3️⃣ Asynchronous JavaScript
Q6: Callback, Promise, aur Async/Await ka farq kya hai?
➡ Callback: Function ko argument ke taur pe pass karna jo later execute hoga.
➡ Promise: Future mein complete hone wale task ko represent karta hai (resolve / reject).
➡ Async/Await: Promises ko handle karne ka modern aur readable syntax hai.

js
Copy
Edit
// Callback
function fetchData(callback) {
  setTimeout(() => callback("Data loaded"), 1000);
}

// Promise
const fetchDataPromise = new Promise((resolve) => {
  setTimeout(() => resolve("Data loaded"), 1000);
});

// Async/Await
async function fetchDataAsync() {
  let data = await fetchDataPromise;
  console.log(data);
}
fetchDataAsync();
Q7: JavaScript Event Loop kya hai?
➡ Event Loop ek mechanism hai jo JavaScript ke asynchronous tasks ko handle karta hai.
➡ Example:

js
Copy
Edit
console.log("Start");

setTimeout(() => console.log("Timeout"), 0);

Promise.resolve().then(() => console.log("Promise"));

console.log("End");
➡ Output:

sql
Copy
Edit
Start  
End  
Promise  
Timeout  
Promise Microtask Queue mein chalta hai, jo setTimeout se pehle execute hota hai.

4️⃣ Objects & Arrays
Q8: map(), forEach(), filter() aur reduce() mein kya farq hai?

Method	Returns New Array?	Purpose
map()	✅ Yes	Each element ko transform karta hai
forEach()	❌ No	Har element pe function execute karta hai
filter()	✅ Yes	Specific condition match karne wale elements ko return karta hai
reduce()	✅ Yes	Ek single value return karta hai
➡ Example:

js
Copy
Edit
const numbers = [1, 2, 3, 4, 5];

const doubled = numbers.map(num => num * 2);
console.log(doubled); // [2, 4, 6, 8, 10]

const evens = numbers.filter(num => num % 2 === 0);
console.log(evens); // [2, 4]

const sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum); // 15
5️⃣ Advanced JavaScript
Q9: call(), apply(), aur bind() ka difference?
➡ call(): Function ko invoke karta hai aur arguments individually pass karta hai.
➡ apply(): Function ko invoke karta hai aur arguments array ke form mein leta hai.
➡ bind(): Function ka new copy return karta hai jo later execute ho sakti hai.

js
Copy
Edit
function greet(message) {
  console.log(`${message}, ${this.name}`);
}

const person = { name: "Ali" };

greet.call(person, "Hello");  // Hello, Ali
greet.apply(person, ["Hi"]);  // Hi, Ali
const boundFunc = greet.bind(person, "Hey");
boundFunc(); // Hey, Ali
Q10: == aur === ka difference?
➡ == (loose equality): Type conversion karta hai (type coercion).
➡ === (strict equality): Type conversion nahi karta.

js
Copy
Edit
console.log(5 == "5");  // true  (type conversion)
console.log(5 === "5"); // false (strict comparison)
6️⃣ Error Handling & Performance Optimization
Q11: JavaScript mein errors handle karne ke liye kya use hota hai?
➡ try...catch statement ka use hota hai.
➡ Example:

js
Copy
Edit
try {
  let result = 10 / 0;
  if (!isFinite(result)) throw new Error("Divide by zero error!");
} catch (error) {
  console.log(error.message);
}
Q12: Debouncing aur Throttling kya hai?
➡ Debouncing: Multiple events hone par sirf last event execute hota hai.
➡ Throttling: Ek specific interval ke baad event execute hota hai.

js
Copy
Edit
// Debounce Example
function debounce(func, delay) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => func(...args), delay);
  };
}

// Throttle Example
function throttle(func, limit) {
  let flag = true;
  return function (...args) {
    if (flag) {
      func(...args);
      flag = false;
      setTimeout(() => (flag = true), limit);
    }
  };
}   